# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: app - Build and push
        id: app_build
        uses: docker/build-push-action@v2
        with:
          context: ./app
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flask-demo-app:latest

      - name: nginx - Build and push
        id: nginx_build
        uses: docker/build-push-action@v2
        with:
          context: ./nginx
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flask-demo-nginx:latest

      - name: Image digest
        run: |
          echo app - ${{ steps.app_build.outputs.digest }}
          echo nginx - ${{ steps.nginx_build.outputs.digest }}
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: app image - Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: flask-ecr-ecs-demo
#          IMAGE_TAG: app
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG app
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#      - name: nginx image - Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: flask-ecr-ecs-demo
#          IMAGE_TAG: nginx
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG nginx
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: task-definition.json
#        container-name: my-container
#        image: ${{ steps.build-image.outputs.image }}
#
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: my-service
#        cluster: my-cluster
#        wait-for-service-stability: true